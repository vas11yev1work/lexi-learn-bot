import { Bot, GrammyError, HttpError, session } from 'grammy';
import dotenv from 'dotenv';
import type { BotContext, SessionData } from '@/types/index.js';
import { conversations, createConversation } from '@grammyjs/conversations';
import { Menu } from '@grammyjs/menu';
import { getOrCreateUser, prisma } from '@/db/index.js';
import { createModuleConversation } from '@/conversations/createModuleConversation.js';
import * as moduleHandlers from '@/handlers/moduleHandlers.js';
import * as sessionHandlers from '@/handlers/sessionHandlers.js';
import * as statisticsHandlers from '@/handlers/statisticsHandlers.js';
import { createCardConversation } from '@/conversations/createCardConversation.js';
import { TaskFactory } from '@/tasks/taskFactory.js';
import { editCardConversation } from '@/conversations/editCardConversation.js';

dotenv.config();

if (!process.env.BOT_TOKEN) {
  console.error('Error: BOT_TOKEN is not defined in .env file');
  process.exit(1);
}

const bot = new Bot<BotContext>(process.env.BOT_TOKEN);

bot.use(
  session({
    initial: (): SessionData => ({
      action: null,
      sessionModuleId: null,
      cardId: null,
      currentSession: null,
      currentQuestionIndex: 0,
      customFields: [],
      tempData: {},
    }),
  }),
);

bot.use(conversations());
bot.use(createConversation<BotContext, BotContext>(createModuleConversation));
bot.use(createConversation<BotContext, BotContext>(createCardConversation));
bot.use(createConversation<BotContext, BotContext>(editCardConversation));

const mainMenu = new Menu<BotContext>('main_menu')
  .text('üìö –ú–æ–∏ –º–æ–¥—É–ª–∏', async (ctx) => {
    await moduleHandlers.listModules(ctx);
  })
  .text('üìù –°–æ–∑–¥–∞—Ç—å –º–æ–¥—É–ª—å', async (ctx) => {
    await ctx.conversation.enter('createModuleConversation');
  })
  .row()
  .text('üéØ –ù–∞—á–∞—Ç—å –∑–∞–Ω—è—Ç–∏–µ', async (ctx) => {
    await sessionHandlers.selectModuleForSession(ctx);
  })
  .text('üìä –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞', async (ctx) => {
    await statisticsHandlers.showStatistics(ctx);
  });

bot.use(mainMenu);

bot.command('start', async (ctx) => {
  if (!ctx.from) {
    await ctx.reply('–ù–µ —É–¥–∞–ª–æ—Å—å –æ–ø—Ä–µ–¥–µ–ª–∏—Ç—å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –ø–æ–ø—Ä–æ–±—É–π—Ç–µ –µ—â–µ —Ä–∞–∑');
    return;
  }

  await getOrCreateUser(BigInt(ctx.from.id));

  await ctx.reply(
    'üëã –î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å –≤ –±–æ—Ç–∞ –¥–ª—è –∏–∑—É—á–µ–Ω–∏—è –∏–Ω–æ—Å—Ç—Ä–∞–Ω–Ω—ã—Ö —Å–ª–æ–≤!\n\n' +
      '–ó–¥–µ—Å—å –≤—ã –º–æ–∂–µ—Ç–µ —Å–æ–∑–¥–∞–≤–∞—Ç—å –º–æ–¥—É–ª–∏ —Å –∫–∞—Ä—Ç–æ—á–∫–∞–º–∏ –¥–ª—è –∏–∑—É—á–µ–Ω–∏—è –∏ —Ç—Ä–µ–Ω–∏—Ä–æ–≤–∫–∏ –Ω–æ–≤—ã—Ö —Å–ª–æ–≤ –∏ —Ñ—Ä–∞–∑',
    { reply_markup: mainMenu },
  );
});

bot.command('help', async (ctx) => {
  await ctx.reply(
    'üîç *–ö–∞–∫ –ø–æ–ª—å–∑–æ–≤–∞—Ç—å—Å—è –±–æ—Ç–æ–º:*\n\n' +
      '1Ô∏è‚É£ –°–æ–∑–¥–∞–π—Ç–µ –º–æ–¥—É–ª—å, —É–∫–∞–∑–∞–≤ –Ω–∞–∑–≤–∞–Ω–∏–µ, –æ–ø–∏—Å–∞–Ω–∏–µ –∏ –∫–∞—Å—Ç–æ–º–Ω—ã–µ –ø–æ–ª—è\n' +
      '2Ô∏è‚É£ –î–æ–±–∞–≤—å—Ç–µ –∫–∞—Ä—Ç–æ—á–∫–∏ –≤ –º–æ–¥—É–ª—å\n' +
      '3Ô∏è‚É£ –ù–∞—á–Ω–∏—Ç–µ –∑–∞–Ω—è—Ç–∏–µ –¥–ª—è —Ç—Ä–µ–Ω–∏—Ä–æ–≤–∫–∏\n\n' +
      '–ë–æ—Ç –∏—Å–ø–æ–ª—å–∑—É–µ—Ç –∞–ª–≥–æ—Ä–∏—Ç–º SuperMemo SM\\-2 –¥–ª—è —ç—Ñ—Ñ–µ–∫—Ç–∏–≤–Ω–æ–≥–æ –æ–±—É—á–µ–Ω–∏—è —Å –∏–Ω—Ç–µ—Ä–≤–∞–ª—å–Ω—ã–º–∏ –ø–æ–≤—Ç–æ—Ä–µ–Ω–∏—è–º–∏',
    { parse_mode: 'MarkdownV2' },
  );
});

bot.callbackQuery('back_to_main', async (ctx) => {
  await ctx.reply('–ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é:', { reply_markup: mainMenu });
  await ctx.answerCallbackQuery();
});

bot.callbackQuery('create_module', async (ctx) => {
  await ctx.conversation.enter('createModuleConversation');
  await ctx.answerCallbackQuery();
});

bot.callbackQuery('back_to_modules', async (ctx) => {
  await moduleHandlers.listModules(ctx);
  await ctx.answerCallbackQuery();
});

bot.callbackQuery(/view_module_(\d+)/, async (ctx) => {
  const moduleId = parseInt(ctx.match[1]);
  await moduleHandlers.viewModuleCards(ctx, moduleId);
  await ctx.answerCallbackQuery();
});

bot.callbackQuery(/add_card_(\d+)/, async (ctx) => {
  ctx.session.sessionModuleId = parseInt(ctx.match[1]);
  await ctx.conversation.enter('createCardConversation');
  await ctx.answerCallbackQuery();
});

bot.callbackQuery(/view_cards_(\d+)_(\d+)/, async (ctx) => {
  const moduleId = parseInt(ctx.match[1]);
  const page = parseInt(ctx.match[2]);
  await moduleHandlers.viewAllCards(ctx, moduleId, page);
  await ctx.answerCallbackQuery();
});

bot.callbackQuery(/start_session_(\d+)/, async (ctx) => {
  const moduleId = parseInt(ctx.match[1]);
  await sessionHandlers.startSession(ctx, moduleId);
  await ctx.answerCallbackQuery();
});

bot.callbackQuery(/difficulty_(\d+)_(\d+)/, async (ctx) => {
  try {
    const questionId = ctx.match[1];
    const difficultyValue = ctx.match[2];

    const question = await prisma.question.findUnique({
      where: { id: parseInt(questionId) },
    });

    if (!question) {
      await ctx.reply('–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±—Ä–∞–±–æ—Ç–∫–µ –æ—Ç–≤–µ—Ç–∞');
      return;
    }

    await sessionHandlers.handleDifficulty(
      ctx,
      parseInt(questionId),
      question.cardId,
      parseInt(difficultyValue),
    );
  } catch (error) {
    console.error('Error processing difficulty:', error);
    await ctx.reply('–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±—Ä–∞–±–æ—Ç–∫–µ –æ—Ü–µ–Ω–∫–∏ —Å–ª–æ–∂–Ω–æ—Å—Ç–∏');
  } finally {
    await ctx.answerCallbackQuery();
  }
});

bot.callbackQuery(/idk_(\d+)/, async (ctx) => {
  const questionId = parseInt(ctx.match[1]);
  await sessionHandlers.updateProgressForIDK(ctx, questionId);
  await ctx.answerCallbackQuery();
});

bot.callbackQuery(/manage_cards_(\d+)/, async (ctx) => {
  const moduleId = parseInt(ctx.match[1]);
  await moduleHandlers.manageModuleCards(ctx, moduleId);
  await ctx.answerCallbackQuery();
});

bot.callbackQuery(/view_card_(\d+)/, async (ctx) => {
  const cardId = parseInt(ctx.match[1]);
  await moduleHandlers.viewCard(ctx, cardId);
  await ctx.answerCallbackQuery();
});

bot.callbackQuery(/delete_card_(\d+)/, async (ctx) => {
  const cardId = parseInt(ctx.match[1]);
  await moduleHandlers.deleteCard(ctx, cardId);
  await ctx.answerCallbackQuery();
});

bot.callbackQuery(/confirm_card_delete_(\d+)/, async (ctx) => {
  const cardId = parseInt(ctx.match[1]);

  try {
    // –ü–æ–ª—É—á–∞–µ–º moduleId –ø–µ—Ä–µ–¥ —É–¥–∞–ª–µ–Ω–∏–µ–º –∫–∞—Ä—Ç–æ—á–∫–∏
    const card = await prisma.card.findUnique({
      where: { id: cardId },
      select: { moduleId: true },
    });

    if (!card) {
      await ctx.reply('–ö–∞—Ä—Ç–æ—á–∫–∞ –Ω–µ –Ω–∞–π–¥–µ–Ω–∞.');
      return;
    }

    const moduleId = card.moduleId;

    // –£–¥–∞–ª—è–µ–º –∫–∞—Ä—Ç–æ—á–∫—É
    await prisma.card.delete({
      where: { id: cardId },
    });

    await ctx.reply('‚úÖ –ö–∞—Ä—Ç–æ—á–∫–∞ —É—Å–ø–µ—à–Ω–æ —É–¥–∞–ª–µ–Ω–∞!');

    // –í–æ–∑–≤—Ä–∞—â–∞–µ–º—Å—è –∫ —É–ø—Ä–∞–≤–ª–µ–Ω–∏—é –∫–∞—Ä—Ç–æ—á–∫–∞–º–∏
    await moduleHandlers.manageModuleCards(ctx, moduleId);
  } catch (error) {
    console.error('Error deleting card:', error);
    await ctx.reply('–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ —É–¥–∞–ª–µ–Ω–∏–∏ –∫–∞—Ä—Ç–æ—á–∫–∏. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –ø–æ–ø—Ä–æ–±—É–π—Ç–µ –µ—â–µ —Ä–∞–∑.');
  } finally {
    await ctx.answerCallbackQuery();
  }
});

bot.callbackQuery(/delete_module_(\d+)/, async (ctx) => {
  const moduleId = parseInt(ctx.match[1]);
  await moduleHandlers.deleteModule(ctx, moduleId);
  await ctx.answerCallbackQuery();
});

bot.callbackQuery(/confirm_module_delete_(\d+)/, async (ctx) => {
  const moduleId = parseInt(ctx.match[1]);

  try {
    await prisma.module.delete({
      where: { id: moduleId },
    });

    await ctx.reply('‚úÖ –ú–æ–¥—É–ª—å —É—Å–ø–µ—à–Ω–æ —É–¥–∞–ª–µ–Ω!');
    await ctx.answerCallbackQuery();
    await moduleHandlers.listModules(ctx);
  } catch (error) {
    console.error('Error deleting module:', error);
    await ctx.reply('–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ —É–¥–∞–ª–µ–Ω–∏–∏ –º–æ–¥—É–ª—è.');
  } finally {
    await ctx.answerCallbackQuery();
  }
});

bot.callbackQuery(/edit_card_(\d+)/, async (ctx) => {
  ctx.session.cardId = parseInt(ctx.match[1]);
  await ctx.conversation.enter('editCardConversation');
  await ctx.answerCallbackQuery();
});

bot.callbackQuery(/choice_(\d+)_(\d+|fake)/, async (ctx) => {
  const [_, questionId, cardIdOrFake] = ctx.match;

  const questionIdParsed = parseInt(questionId);
  const cardIdOrFakeParsed = cardIdOrFake === 'fake' ? 'fake' : parseInt(cardIdOrFake);

  await sessionHandlers.processChoiceAnswer(ctx, questionIdParsed, cardIdOrFakeParsed);
  await ctx.answerCallbackQuery();
});

bot.on('message:text', async (ctx) => {
  // –ï—Å–ª–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –æ—Ç–≤–µ—á–∞–µ—Ç –Ω–∞ –≤–æ–ø—Ä–æ—Å —Å –æ–ø—Ä–µ–¥–µ–ª–µ–Ω–∏–µ–º
  if (ctx.session.action === 'answer_definition') {
    ctx.session.action = null;
    if (ctx.message.text) {
      await sessionHandlers.processDefinitionAnswer(ctx, ctx.message.text);
    }
    return;
  }

  // –í –¥—Ä—É–≥–∏—Ö —Å–ª—É—á–∞—è—Ö –ø–æ–∫–∞–∑—ã–≤–∞–µ–º –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é
  await ctx.reply('–ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ –º–µ–Ω—é –¥–ª—è –Ω–∞–≤–∏–≥–∞—Ü–∏–∏', { reply_markup: mainMenu });
});

bot.catch((err) => {
  const ctx = err.ctx;
  console.error(`–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±—Ä–∞–±–æ—Ç–∫–µ –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è ${ctx.update.update_id}:`);
  console.error(err.error);

  if (err.error instanceof GrammyError) {
    console.error('Error in request:', err.error.description);
    if (ctx) {
      ctx.reply(`–û—à–∏–±–∫–∞ API Telegram: ${err.error.description}`).catch(() => {});
    }
  } else if (err.error instanceof HttpError) {
    console.error('HTTP error:', err.error);
    if (ctx) {
      ctx
        .reply('–û—à–∏–±–∫–∞ —Å–æ–µ–¥–∏–Ω–µ–Ω–∏—è —Å —Å–µ—Ä–≤–µ—Ä–∞–º–∏ Telegram. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –ø–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ')
        .catch(() => {});
    }
  } else {
    console.error('Unknown error:', err.error);
    if (ctx) {
      ctx
        .reply(
          '–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±—Ä–∞–±–æ—Ç–∫–µ –≤–∞—à–µ–≥–æ –∑–∞–ø—Ä–æ—Å–∞. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –ø–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ –∏–ª–∏ –Ω–∞—á–Ω–∏—Ç–µ —Å–Ω–∞—á–∞–ª–∞ —Å –∫–æ–º–∞–Ω–¥—ã /start',
        )
        .catch(() => {});
    }
  }
});

async function shutdown() {
  console.log('–ó–∞–≤–µ—Ä—à–µ–Ω–∏–µ —Ä–∞–±–æ—Ç—ã...');

  // –û—Ç–∫–ª—é—á–∞–µ–º—Å—è –æ—Ç –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö
  await prisma.$disconnect();

  // –û—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º –±–æ—Ç–∞
  await bot.stop();

  console.log('–ë–æ—Ç –æ—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω');
  process.exit(0);
}

process.on('SIGINT', shutdown);
process.on('SIGTERM', shutdown);

TaskFactory.initialize();

bot.start();
