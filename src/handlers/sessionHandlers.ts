import type { BotContext } from '../types/index.js';
import { getOrCreateUser, prisma } from '../db/index.js';
import { TaskFactory } from '../tasks/taskFactory.js';
import { SM2 } from '../utils/sm2.js';
import { declensionByNumber } from '../utils/declensionByNumber.js';

export async function selectModuleForSession(ctx: BotContext) {
  if (!ctx.from) {
    await ctx.reply('–ù–µ —É–¥–∞–ª–æ—Å—å –æ–ø—Ä–µ–¥–µ–ª–∏—Ç—å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –Ω–∞—á–Ω–∏—Ç–µ –∑–∞–Ω–æ–≤–æ');
    return;
  }

  const user = await getOrCreateUser(BigInt(ctx.from.id));

  const modules = await prisma.module.findMany({
    where: {
      userId: user.id,
      cards: {
        some: {}, // –ú–æ–¥—É–ª–∏, –≥–¥–µ –µ—Å—Ç—å —Ö–æ—Ç—è –±—ã –æ–¥–Ω–∞ –∫–∞—Ä—Ç–æ—á–∫–∞
      },
    },
    include: {
      _count: {
        select: { cards: true },
      },
    },
  });

  if (modules.length === 0) {
    await ctx.reply('–£ –≤–∞—Å –Ω–µ—Ç –º–æ–¥—É–ª–µ–π —Å –∫–∞—Ä—Ç–æ—á–∫–∞–º–∏ –¥–ª—è –Ω–∞—á–∞–ª–∞ –∑–∞–Ω—è—Ç–∏—è');
    return;
  }

  await ctx.reply('–í—ã–±–µ—Ä–∏—Ç–µ –º–æ–¥—É–ª—å –¥–ª—è –∑–∞–Ω—è—Ç–∏—è:', {
    reply_markup: {
      inline_keyboard: [
        ...modules.map((module) => [
          {
            text: `${module.name} (${module._count.cards} –∫–∞—Ä—Ç–æ—á–µ–∫)`,
            callback_data: `start_session_${module.id}`,
          },
        ]),
        [{ text: '‚óÄÔ∏è –ù–∞–∑–∞–¥', callback_data: 'back_to_main' }],
      ],
    },
  });
}

export async function startSession(ctx: BotContext, moduleId: number) {
  if (!ctx.from) {
    await ctx.reply('–ù–µ —É–¥–∞–ª–æ—Å—å –æ–ø—Ä–µ–¥–µ–ª–∏—Ç—å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –Ω–∞—á–Ω–∏—Ç–µ –∑–∞–Ω–æ–≤–æ');
    return;
  }

  const user = await getOrCreateUser(BigInt(ctx.from.id));

  // –ü—Ä–æ–≤–µ—Ä—è–µ–º –Ω–∞–ª–∏—á–∏–µ –∫–∞—Ä—Ç–æ—á–µ–∫ –≤ –º–æ–¥—É–ª–µ
  const cardsCount = await prisma.card.count({
    where: { moduleId },
  });

  if (cardsCount === 0) {
    await ctx.reply('–í —ç—Ç–æ–º –º–æ–¥—É–ª–µ –ø–æ–∫–∞ –Ω–µ—Ç –∫–∞—Ä—Ç–æ—á–µ–∫. –î–æ–±–∞–≤—å—Ç–µ –∫–∞—Ä—Ç–æ—á–∫–∏, —á—Ç–æ–±—ã –Ω–∞—á–∞—Ç—å –∑–∞–Ω—è—Ç–∏–µ');
    return;
  }

  const today = new Date();
  const cardsForReview = await prisma.progress.findMany({
    where: {
      userId: user.id,
      card: { moduleId },
      nextReview: { lte: today },
    },
    select: {
      cardId: true,
    },
  });

  // –ï—Å–ª–∏ –∫–∞—Ä—Ç–æ—á–µ–∫ –¥–ª—è –ø–æ–≤—Ç–æ—Ä–µ–Ω–∏—è –Ω–µ—Ç –∏–ª–∏ –∏—Ö –º–µ–Ω—å—à–µ 20, –¥–æ–±–∞–≤–ª—è–µ–º –Ω–æ–≤—ã–µ
  let cardIds = cardsForReview.map((p) => p.cardId);

  if (cardIds.length < 20) {
    const newCards = await prisma.card.findMany({
      where: {
        moduleId,
        id: { notIn: cardIds.length > 0 ? cardIds : [-1] },
      },
      take: 20 - cardIds.length,
      select: { id: true },
    });

    cardIds = [...cardIds, ...newCards.map((c) => c.id)];
  }

  cardIds = cardIds.slice(0, 20);
  cardIds.sort(() => Math.random() - 0.5);

  const taskTypes = TaskFactory.getAllTaskTypes();

  const session = await prisma.session.create({
    data: {
      userId: user.id,
      moduleId,
      questions: {
        create: cardIds.map((cardId, index) => ({
          cardId,
          // –°–ª—É—á–∞–π–Ω–æ –≤—ã–±–∏—Ä–∞–µ–º —Ç–∏–ø –∑–∞–¥–∞–Ω–∏—è –∏–∑ –≤—Å–µ—Ö –¥–æ—Å—Ç—É–ø–Ω—ã—Ö
          type: taskTypes[index % taskTypes.length],
        })),
      },
    },
    include: { questions: true },
  });

  ctx.session.currentSession = session.id;
  ctx.session.currentQuestionIndex = 0;

  await askNextQuestion(ctx);
}

export async function askNextQuestion(ctx: BotContext): Promise<void> {
  if (!ctx.session.currentSession) {
    await ctx.reply('–ê–∫—Ç–∏–≤–Ω–æ–µ –∑–∞–Ω—è—Ç–∏–µ –Ω–µ –Ω–∞–π–¥–µ–Ω–æ. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –Ω–∞—á–Ω–∏—Ç–µ –Ω–æ–≤–æ–µ –∑–∞–Ω—è—Ç–∏–µ');
    return;
  }

  // –ü–æ–ª—É—á–∞–µ–º —Å–µ—Å—Å–∏—é –∏ —Ç–µ–∫—É—â–∏–π –≤–æ–ø—Ä–æ—Å
  const session = await prisma.session.findUnique({
    where: { id: ctx.session.currentSession },
    include: {
      questions: true,
    },
  });

  if (!session || ctx.session.currentQuestionIndex >= session.questions.length) {
    // –ó–∞–≤–µ—Ä—à–∞–µ–º —Å–µ—Å—Å–∏—é
    if (session) {
      await prisma.session.update({
        where: { id: ctx.session.currentSession },
        data: {
          completed: true,
          endedAt: new Date(),
        },
      });
    }

    await ctx.reply('üéâ –ó–∞–Ω—è—Ç–∏–µ –∑–∞–≤–µ—Ä—à–µ–Ω–æ! üéâ', {
      reply_markup: {
        inline_keyboard: [[{ text: '‚óÄÔ∏è –í–µ—Ä–Ω—É—Ç—å—Å—è –≤ –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é', callback_data: 'back_to_main' }]],
      },
    });

    return;
  }

  const question = session.questions[ctx.session.currentQuestionIndex];
  ctx.session.tempData.currentQuestion = question;

  const card = await prisma.card.findUnique({
    where: { id: question.cardId },
    include: {
      customValues: {
        include: {
          customField: true,
        },
      },
    },
  });

  if (!card) {
    await ctx.reply('–ö–∞—Ä—Ç–æ—á–∫–∞ –Ω–µ –Ω–∞–π–¥–µ–Ω–∞. –ü—Ä–æ–ø—É—Å–∫–∞–µ–º –≤–æ–ø—Ä–æ—Å');
    ctx.session.currentQuestionIndex++;
    await askNextQuestion(ctx);
    return;
  }

  // –ü–æ–ª—É—á–∞–µ–º –∑–∞–¥–∞–Ω–∏–µ –ø–æ —Ç–∏–ø—É
  const task = TaskFactory.getTask(question.type);

  if (!task) {
    await ctx.reply(`–ù–µ–∏–∑–≤–µ—Å—Ç–Ω—ã–π —Ç–∏–ø –∑–∞–¥–∞–Ω–∏—è: ${question.type}. –ü—Ä–æ–ø—É—Å–∫–∞–µ–º –≤–æ–ø—Ä–æ—Å`);
    ctx.session.currentQuestionIndex++;
    await askNextQuestion(ctx);
    return;
  }

  // –ì–µ–Ω–µ—Ä–∏—Ä—É–µ–º –≤–æ–ø—Ä–æ—Å —Å –ø–æ–º–æ—â—å—é —Å–æ–æ—Ç–≤–µ—Ç—Å—Ç–≤—É—é—â–µ–≥–æ —Ç–∏–ø–∞ –∑–∞–¥–∞–Ω–∏—è
  await task.generateQuestion(ctx, card);
}

export async function processChoiceAnswer(
  ctx: BotContext,
  questionId: number,
  cardIdOrFake: number | 'fake',
) {
  try {
    const question = await prisma.question.findUnique({
      where: { id: questionId },
      include: {
        card: true,
      },
    });

    if (!question) {
      await ctx.reply('–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±—Ä–∞–±–æ—Ç–∫–µ –æ—Ç–≤–µ—Ç–∞');
      return;
    }

    const task = TaskFactory.getTask(question.type);

    if (!task) {
      await ctx.reply('–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±—Ä–∞–±–æ—Ç–∫–µ –æ—Ç–≤–µ—Ç–∞');
      return;
    }

    const correct = await task.checkAnswer(ctx, questionId, cardIdOrFake);

    await prisma.question.update({
      where: { id: questionId },
      data: {
        answered: true,
        correct,
      },
    });

    const progress = await prisma.progress.findFirst({
      where: {
        cardId: question.cardId,
      },
    });

    let replyMessage;

    if (correct) {
      replyMessage = '‚úÖ –ü—Ä–∞–≤–∏–ª—å–Ω–æ!';
      // –ï—Å–ª–∏ –ø—Ä–æ–≥—Ä–µ—Å—Å–∞ –Ω–µ—Ç –∏–ª–∏ –≤—Ä–µ–º—è —Å–ª–µ–¥—É—é—â–µ–≥–æ –ø–æ–≤—Ç–æ—Ä–µ–Ω–∏—è –º–µ–Ω—å—à–µ —Ç–µ–∫—É—â–µ–π –¥–∞—Ç—ã, –ø–æ–∫–∞–∑—ã–≤–∞–µ–º –∫–Ω–æ–ø–∫–∏ –¥–ª—è –æ—Ü–µ–Ω–∫–∏ —Å–ª–æ–∂–Ω–æ—Å—Ç–∏
      if (!progress || progress.nextReview < new Date()) {
        await ctx.reply(replyMessage + '\n\n–ù–∞—Å–∫–æ–ª—å–∫–æ –ª–µ–≥–∫–æ –±—ã–ª–æ –≤—Å–ø–æ–º–Ω–∏—Ç—å –æ—Ç–≤–µ—Ç?', {
          reply_markup: {
            inline_keyboard: [
              [
                { text: 'üòì –û—á–µ–Ω—å —Å–ª–æ–∂–Ω–æ', callback_data: `difficulty_${questionId}_0` },
                { text: 'üòü –°–ª–æ–∂–Ω–æ', callback_data: `difficulty_${questionId}_1` },
              ],
              [
                { text: 'üòê –°—Ä–µ–¥–Ω–µ', callback_data: `difficulty_${questionId}_2` },
                { text: 'üôÇ –õ–µ–≥–∫–æ', callback_data: `difficulty_${questionId}_3` },
              ],
              [
                { text: 'üòä –û—á–µ–Ω—å –ª–µ–≥–∫–æ', callback_data: `difficulty_${questionId}_4` },
                { text: 'üòÅ –≠–ª–µ–º–µ–Ω—Ç–∞—Ä–Ω–æ', callback_data: `difficulty_${questionId}_5` },
              ],
            ],
          },
        });
      } else {
        await ctx.reply(replyMessage);
        ctx.session.currentQuestionIndex++;
        await askNextQuestion(ctx);
      }
    } else {
      replyMessage = '‚ùå –ù–µ–≤–µ—Ä–Ω–æ';
      await ctx.reply(replyMessage);
      await task.showCorrectAnswer(ctx, questionId);
      await updateProgressForWrongAnswer(ctx, question);
    }
  } catch {
    await ctx.reply('–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±—Ä–∞–±–æ—Ç–∫–µ –æ—Ç–≤–µ—Ç–∞');
  }
}

export async function processDefinitionAnswer(ctx: BotContext, text: string): Promise<void> {
  const questionId = ctx.session.tempData.currentQuestionId;
  const cardId = ctx.session.tempData.currentCardId;

  try {
    if (!questionId || !cardId) {
      await ctx.reply('–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –Ω–∞—á–Ω–∏—Ç–µ –∑–∞–Ω—è—Ç–∏–µ –∑–∞–Ω–æ–≤–æ');
      return;
    }

    const question = await prisma.question.findUnique({
      where: { id: questionId },
      include: { card: true },
    });

    if (!question) {
      await ctx.reply('–í–æ–ø—Ä–æ—Å –Ω–µ –Ω–∞–π–¥–µ–Ω. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –Ω–∞—á–Ω–∏—Ç–µ –∑–∞–Ω—è—Ç–∏–µ –∑–∞–Ω–æ–≤–æ');
      return;
    }

    const task = TaskFactory.getTask(question.type);

    if (!task) {
      await ctx.reply('–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±—Ä–∞–±–æ—Ç–∫–µ –æ—Ç–≤–µ—Ç–∞');
      return;
    }

    const correct = await task.checkAnswer(ctx, questionId, text);

    await prisma.question.update({
      where: { id: questionId },
      data: {
        answered: true,
        correct,
      },
    });

    const progress = await prisma.progress.findFirst({
      where: {
        cardId: question.cardId,
      },
    });

    let replyMessage;

    if (correct) {
      replyMessage = '‚úÖ –ü—Ä–∞–≤–∏–ª—å–Ω–æ!';
      // –ï—Å–ª–∏ –ø—Ä–æ–≥—Ä–µ—Å—Å–∞ –Ω–µ—Ç –∏–ª–∏ –≤—Ä–µ–º—è —Å–ª–µ–¥—É—é—â–µ–≥–æ –ø–æ–≤—Ç–æ—Ä–µ–Ω–∏—è –º–µ–Ω—å—à–µ —Ç–µ–∫—É—â–µ–π –¥–∞—Ç—ã, –ø–æ–∫–∞–∑—ã–≤–∞–µ–º –∫–Ω–æ–ø–∫–∏ –¥–ª—è –æ—Ü–µ–Ω–∫–∏ —Å–ª–æ–∂–Ω–æ—Å—Ç–∏
      if (!progress || progress.nextReview < new Date()) {
        await ctx.reply(replyMessage + '\n\n–ù–∞—Å–∫–æ–ª—å–∫–æ –ª–µ–≥–∫–æ –±—ã–ª–æ –≤—Å–ø–æ–º–Ω–∏—Ç—å –æ—Ç–≤–µ—Ç?', {
          reply_markup: {
            inline_keyboard: [
              [
                { text: 'üòì –û—á–µ–Ω—å —Å–ª–æ–∂–Ω–æ', callback_data: `difficulty_${questionId}_0` },
                { text: 'üòü –°–ª–æ–∂–Ω–æ', callback_data: `difficulty_${questionId}_1` },
              ],
              [
                { text: 'üòê –°—Ä–µ–¥–Ω–µ', callback_data: `difficulty_${questionId}_2` },
                { text: 'üôÇ –õ–µ–≥–∫–æ', callback_data: `difficulty_${questionId}_3` },
              ],
              [
                { text: 'üòä –û—á–µ–Ω—å –ª–µ–≥–∫–æ', callback_data: `difficulty_${questionId}_4` },
                { text: 'üòÅ –≠–ª–µ–º–µ–Ω—Ç–∞—Ä–Ω–æ', callback_data: `difficulty_${questionId}_5` },
              ],
            ],
          },
        });
      } else {
        await ctx.reply(replyMessage);
        ctx.session.currentQuestionIndex++;
        await askNextQuestion(ctx);
      }
    } else {
      replyMessage = '‚ùå –ù–µ–≤–µ—Ä–Ω–æ';
      await ctx.reply(replyMessage);
      await task.showCorrectAnswer(ctx, questionId);
      await updateProgressForWrongAnswer(ctx, question);
    }
  } catch {
    await ctx.reply('–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±—Ä–∞–±–æ—Ç–∫–µ –æ—Ç–≤–µ—Ç–∞');
  }
}

export async function updateProgressForIDK(ctx: BotContext, questionId: number) {
  if (!ctx.from) return;

  const question = await prisma.question.findUnique({
    where: { id: questionId },
  });

  if (!question) {
    await ctx.reply('–í–æ–ø—Ä–æ—Å –Ω–µ –Ω–∞–π–¥–µ–Ω. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –Ω–∞—á–Ω–∏—Ç–µ –∑–∞–Ω—è—Ç–∏–µ –∑–∞–Ω–æ–≤–æ');
    return;
  }

  const task = TaskFactory.getTask(question.type);

  if (!task) {
    await ctx.reply('–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±—Ä–∞–±–æ—Ç–∫–µ –æ—Ç–≤–µ—Ç–∞');
    return;
  }

  await task.showCorrectAnswer(ctx, questionId);

  await updateProgressForWrongAnswer(ctx, question);
}

async function updateProgressForWrongAnswer(ctx: BotContext, question: any): Promise<void> {
  if (!ctx.from) return;

  const user = await getOrCreateUser(BigInt(ctx.from.id));

  // –ü–æ–ª—É—á–∞–µ–º –∏–ª–∏ —Å–æ–∑–¥–∞—ë–º –∑–∞–ø–∏—Å—å –ø—Ä–æ–≥—Ä–µ—Å—Å–∞
  let progress = await prisma.progress.findFirst({
    where: {
      userId: user.id,
      cardId: question.cardId,
    },
  });

  if (!progress) {
    progress = await prisma.progress.create({
      data: {
        userId: user.id,
        cardId: question.cardId,
        easeFactor: 2.1,
        interval: 0,
        repetitions: 0,
      },
    });
  }

  // –î–ª—è –Ω–µ–ø—Ä–∞–≤–∏–ª—å–Ω—ã—Ö –æ—Ç–≤–µ—Ç–æ–≤ –≤—Å–µ–≥–¥–∞ —Å–±—Ä–∞—Å—ã–≤–∞–µ–º –∏–Ω—Ç–µ—Ä–≤–∞–ª
  // –Ω–æ —Å–æ—Ö—Ä–∞–Ω—è–µ–º —Ñ–∞–∫—Ç–æ—Ä –ª–µ–≥–∫–æ—Å—Ç–∏
  const nextReviewDate = new Date(); // –°–µ–≥–æ–¥–Ω—è

  await prisma.progress.update({
    where: { id: progress.id },
    data: {
      repetitions: 0,
      interval: 1,
      nextReview: nextReviewDate,
      lastReviewed: new Date(),
    },
  });

  // –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ —Å–ª–µ–¥—É—é—â–µ–º –ø–æ–≤—Ç–æ—Ä–µ–Ω–∏–∏
  await ctx.reply('üìÖ –ö–∞—Ä—Ç–æ—á–∫–∞ –±—É–¥–µ—Ç –ø–æ–≤—Ç–æ—Ä–µ–Ω–∞ –∑–∞–≤—Ç—Ä–∞');

  // –ü–µ—Ä–µ—Ö–æ–¥–∏–º –∫ —Å–ª–µ–¥—É—é—â–µ–º—É –≤–æ–ø—Ä–æ—Å—É
  ctx.session.currentQuestionIndex++;
  await askNextQuestion(ctx);
}

export async function handleDifficulty(
  ctx: BotContext,
  questionId: number,
  cardId: number,
  difficulty: number,
) {
  if (!ctx.from) {
    await ctx.reply('–ù–µ —É–¥–∞–ª–æ—Å—å –æ–ø—Ä–µ–¥–µ–ª–∏—Ç—å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –Ω–∞—á–Ω–∏—Ç–µ –∑–∞–Ω–æ–≤–æ');
    return;
  }

  const user = await getOrCreateUser(BigInt(ctx.from.id));

  // –ü–æ–ª—É—á–∞–µ–º –≤–æ–ø—Ä–æ—Å
  const question = await prisma.question.findUnique({
    where: { id: questionId },
  });

  if (!question) {
    await ctx.reply('–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±—Ä–∞–±–æ—Ç–∫–µ –æ—Ç–≤–µ—Ç–∞');
    return;
  }

  await prisma.question.update({
    where: { id: questionId },
    data: { difficulty },
  });

  let progress = await prisma.progress.findFirst({
    where: {
      userId: user.id,
      cardId: question.cardId,
    },
  });

  if (!progress) {
    // –°–æ–∑–¥–∞–µ–º –Ω–æ–≤—É—é –∑–∞–ø–∏—Å—å –ø—Ä–æ–≥—Ä–µ—Å—Å–∞
    progress = await prisma.progress.create({
      data: {
        userId: user.id,
        cardId: question.cardId,
        easeFactor: 2.1,
        interval: 0,
        repetitions: 0,
      },
    });
  }

  const result = SM2.calculateNextInterval(
    progress.repetitions,
    progress.easeFactor,
    difficulty,
    progress.interval,
  );

  const nextReviewDate = new Date();
  nextReviewDate.setDate(nextReviewDate.getDate() + result.interval);

  await prisma.progress.update({
    where: { id: progress.id },
    data: {
      repetitions: result.repetitions,
      easeFactor: result.easeFactor,
      interval: result.interval,
      nextReview: nextReviewDate,
      lastReviewed: new Date(),
    },
  });

  await ctx.reply(
    `üìÖ –°–ª–µ–¥—É—é—â–µ–µ –ø–æ–≤—Ç–æ—Ä–µ–Ω–∏–µ —á–µ—Ä–µ–∑: ${result.interval} ${declensionByNumber(result.interval, ['–¥–µ–Ω—å', '–¥–Ω—è', '–¥–Ω–µ–π'])}`,
  );
  ctx.session.currentQuestionIndex++;
  await askNextQuestion(ctx);
}
