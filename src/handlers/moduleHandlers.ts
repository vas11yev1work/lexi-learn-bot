import type { BotContext } from '../types/index.js';
import { getOrCreateUser, prisma } from '../db/index.js';
import { declensionByNumber } from '../utils/declensionByNumber.js';

export async function listModules(ctx: BotContext): Promise<void> {
  if (!ctx.from) {
    await ctx.reply('–ù–µ —É–¥–∞–ª–æ—Å—å –æ–ø—Ä–µ–¥–µ–ª–∏—Ç—å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –Ω–∞—á–Ω–∏—Ç–µ –∑–∞–Ω–æ–≤–æ');
    return;
  }

  const user = await getOrCreateUser(BigInt(ctx.from.id));

  const modules = await prisma.module.findMany({
    where: { userId: user.id },
    include: {
      _count: {
        select: { cards: true },
      },
    },
    orderBy: { createdAt: 'desc' },
  });

  if (modules.length === 0) {
    await ctx.reply('–£ –≤–∞—Å –ø–æ–∫–∞ –Ω–µ—Ç —Å–æ–∑–¥–∞–Ω–Ω—ã—Ö –º–æ–¥—É–ª–µ–π. –°–æ–∑–¥–∞–π—Ç–µ —Å–≤–æ–π –ø–µ—Ä–≤—ã–π –º–æ–¥—É–ª—å!', {
      reply_markup: {
        inline_keyboard: [[{ text: 'üìù –°–æ–∑–¥–∞—Ç—å –º–æ–¥—É–ª—å', callback_data: 'create_module' }]],
      },
    });
    return;
  }

  let message = 'üìö *–í–∞—à–∏ –º–æ–¥—É–ª–∏:*\n\n';

  for (const module of modules) {
    message += `*${module.name}* (${module._count.cards} ${declensionByNumber(module._count.cards, ['–∫–∞—Ä—Ç–æ—á–∫–∞', '–∫–∞—Ä—Ç–æ—á–∫–∏', '–∫–∞—Ä—Ç–æ—á–µ–∫'])})\n${module.description}\n\n`;
  }

  await ctx.reply(message, {
    parse_mode: 'Markdown',
    reply_markup: {
      inline_keyboard: [
        ...modules.map((module) => [
          {
            text: `${module.name}`,
            callback_data: `view_module_${module.id}`,
          },
        ]),
        [{ text: '‚óÄÔ∏è –í–µ—Ä–Ω—É—Ç—å—Å—è –≤ –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é', callback_data: 'back_to_main' }],
      ],
    },
  });
}

export async function viewModuleCards(ctx: BotContext, moduleId: number): Promise<void> {
  const module = await prisma.module.findUnique({
    where: { id: moduleId },
    include: {
      cards: {
        include: {
          customValues: {
            include: {
              customField: true,
            },
          },
        },
        orderBy: { createdAt: 'desc' },
      },
      customFields: true,
    },
  });

  if (!module) {
    await ctx.reply('–ú–æ–¥—É–ª—å –Ω–µ –Ω–∞–π–¥–µ–Ω');
    return;
  }

  // –≠–∫—Ä–∞–Ω–∏—Ä–æ–≤–∞–Ω–∏–µ —Å–ø–µ—Ü–∏–∞–ª—å–Ω—ã—Ö —Å–∏–º–≤–æ–ª–æ–≤ Markdown
  const escapedName = module.name.replace(/([_*[\]()~`>#+\-=|{}.!])/g, '\\$1');
  const escapedDescription = module.description.replace(/([_*[\]()~`>#+\-=|{}.!])/g, '\\$1');

  let message = `üìö *${escapedName}*\n${escapedDescription}\n\n`;

  if (module.cards.length === 0) {
    message += '–í —ç—Ç–æ–º –º–æ–¥—É–ª–µ –ø–æ–∫–∞ –Ω–µ—Ç –∫–∞—Ä—Ç–æ—á–µ–∫';
  } else {
    message += `–í —ç—Ç–æ–º –º–æ–¥—É–ª–µ *${module.cards.length} ${declensionByNumber(module.cards.length, ['–∫–∞—Ä—Ç–æ—á–∫–∞', '–∫–∞—Ä—Ç–æ—á–∫–∏', '–∫–∞—Ä—Ç–æ—á–µ–∫'])}*`;
  }

  await ctx.reply(message, {
    parse_mode: 'MarkdownV2',
    reply_markup: {
      inline_keyboard: [
        [{ text: '‚ûï –î–æ–±–∞–≤–∏—Ç—å –∫–∞—Ä—Ç–æ—á–∫—É', callback_data: `add_card_${moduleId}` }],
        module.cards.length > 0
          ? [
              { text: 'üîÑ –£–ø—Ä–∞–≤–ª–µ–Ω–∏–µ –∫–∞—Ä—Ç–æ—á–∫–∞–º–∏', callback_data: `manage_cards_${moduleId}` },
              { text: 'üóÉÔ∏è –ü–æ—Å–º–æ—Ç—Ä–µ—Ç—å –∫–∞—Ä—Ç–æ—á–∫–∏', callback_data: `view_cards_${moduleId}_0` },
            ]
          : [],
        module.cards.length > 0
          ? [
              { text: 'üé≤ –ù–∞—á–∞—Ç—å –∑–∞–Ω—è—Ç–∏–µ', callback_data: `start_session_${moduleId}` },
              { text: 'üóëÔ∏è –£–¥–∞–ª–∏—Ç—å –º–æ–¥—É–ª—å', callback_data: `delete_module_${moduleId}` },
            ]
          : [{ text: 'üóëÔ∏è –£–¥–∞–ª–∏—Ç—å –º–æ–¥—É–ª—å', callback_data: `delete_module_${moduleId}` }],
        [{ text: '‚óÄÔ∏è –ù–∞–∑–∞–¥ –∫ –º–æ–¥—É–ª—è–º', callback_data: 'back_to_modules' }],
      ].filter((row) => row.length > 0),
    },
  });
}

export async function viewAllCards(ctx: BotContext, moduleId: number, page: number = 0) {
  const pageSize = 5;

  const module = await prisma.module.findUnique({
    where: { id: moduleId },
    include: {
      cards: {
        include: {
          customValues: {
            include: {
              customField: true,
            },
          },
        },
        orderBy: { createdAt: 'desc' },
        skip: page * pageSize,
        take: pageSize + 1, // –ë–µ—Ä—ë–º –Ω–∞ 1 –±–æ–ª—å—à–µ, —á—Ç–æ–±—ã –ø—Ä–æ–≤–µ—Ä–∏—Ç—å –Ω–∞–ª–∏—á–∏–µ —Å–ª–µ–¥—É—é—â–µ–π —Å—Ç—Ä–∞–Ω–∏—Ü—ã
      },
    },
  });

  if (!module || module.cards.length === 0) {
    await ctx.reply('–í –º–æ–¥—É–ª–µ –Ω–µ—Ç –∫–∞—Ä—Ç–æ—á–µ–∫');
    return;
  }

  const hasNextPage = module.cards.length > pageSize;
  const cardsToShow = hasNextPage ? module.cards.slice(0, pageSize) : module.cards;

  let message = `üìö <b>–ö–∞—Ä—Ç–æ—á–∫–∏ –º–æ–¥—É–ª—è "${module.name}"</b> ${hasNextPage ? `(—Å—Ç—Ä–∞–Ω–∏—Ü–∞ ${page + 1})` : ''}\n\n`;

  for (const card of cardsToShow) {
    message += `<b>${card.phrase}</b> ‚Äì ${card.definition}\n`;
    message += `–ü–æ–¥—Å–∫–∞–∑–∫–∞: ${card.hint || '‚Äì'}\n`;
    if (card.customValues.length > 0) {
      for (const customValue of card.customValues) {
        message += `<i>${customValue.customField.name}: ${customValue.value || '‚Äì'}</i>\n`;
      }
    }
    message += `\n`;
  }

  // –°–æ–∑–¥–∞—ë–º –∫–Ω–æ–ø–∫–∏ –Ω–∞–≤–∏–≥–∞—Ü–∏–∏
  const keyboard = [];

  const navButtons = [];
  if (page > 0) {
    navButtons.push({ text: '‚¨ÖÔ∏è –ù–∞–∑–∞–¥', callback_data: `view_cards_${moduleId}_${page - 1}` });
  }
  if (hasNextPage) {
    navButtons.push({ text: '–í–ø–µ—Ä—ë–¥ ‚û°Ô∏è', callback_data: `view_cards_${moduleId}_${page + 1}` });
  }

  if (navButtons.length > 0) {
    keyboard.push(navButtons);
  }

  keyboard.push([{ text: '‚óÄÔ∏è –ö –º–æ–¥—É–ª—é', callback_data: `view_module_${moduleId}` }]);

  await ctx.reply(message, {
    parse_mode: 'HTML',
    reply_markup: { inline_keyboard: keyboard },
  });
}

export async function deleteModule(ctx: BotContext, moduleId: number): Promise<void> {
  await ctx.reply(
    '–í—ã —É–≤–µ—Ä–µ–Ω—ã, —á—Ç–æ —Ö–æ—Ç–∏—Ç–µ —É–¥–∞–ª–∏—Ç—å —ç—Ç–æ—Ç –º–æ–¥—É–ª—å? –í—Å–µ –∫–∞—Ä—Ç–æ—á–∫–∏ –≤–Ω—É—Ç—Ä–∏ –Ω–µ–≥–æ —Ç–∞–∫–∂–µ –±—É–¥—É—Ç —É–¥–∞–ª–µ–Ω—ã',
    {
      reply_markup: {
        inline_keyboard: [
          [
            { text: '‚úÖ –î–∞, —É–¥–∞–ª–∏—Ç—å', callback_data: `confirm_module_delete_${moduleId}` },
            { text: '‚ùå –ù–µ—Ç, –æ—Ç–º–µ–Ω–∞', callback_data: `view_module_${moduleId}` },
          ],
        ],
      },
    },
  );
}

export async function manageModuleCards(ctx: BotContext, moduleId: number): Promise<void> {
  const module = await prisma.module.findUnique({
    where: { id: moduleId },
    include: {
      cards: {
        orderBy: { createdAt: 'desc' },
      },
    },
  });

  if (!module || module.cards.length === 0) {
    await ctx.reply('–í –º–æ–¥—É–ª–µ –Ω–µ—Ç –∫–∞—Ä—Ç–æ—á–µ–∫', {
      reply_markup: {
        inline_keyboard: [
          [{ text: '‚óÄÔ∏è –ù–∞–∑–∞–¥ –∫ –º–æ–¥—É–ª—é', callback_data: `view_module_${moduleId}` }],
        ],
      },
    });
    return;
  }

  // –≠–∫—Ä–∞–Ω–∏—Ä–æ–≤–∞–Ω–∏–µ —Å–ø–µ—Ü–∏–∞–ª—å–Ω—ã—Ö —Å–∏–º–≤–æ–ª–æ–≤ Markdown
  const escapedName = module.name.replace(/([_*[\]()~`>#+\-=|{}.!])/g, '\\$1');

  let message = `üîÑ *–£–ø—Ä–∞–≤–ª–µ–Ω–∏–µ –∫–∞—Ä—Ç–æ—á–∫–∞–º–∏ –º–æ–¥—É–ª—è "${escapedName}"*\n\n–í—ã–±–µ—Ä–∏—Ç–µ –∫–∞—Ä—Ç–æ—á–∫—É –¥–ª—è —Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏—è –∏–ª–∏ —É–¥–∞–ª–µ–Ω–∏—è:`;

  const keyboard = [];
  let row = [];

  // –ü–µ—Ä–µ–±–∏—Ä–∞–µ–º –≤—Å–µ –∫–∞—Ä—Ç–æ—á–∫–∏
  for (let i = 0; i < module.cards.length; i++) {
    const card = module.cards[i];

    // –î–æ–±–∞–≤–ª—è–µ–º –∫–Ω–æ–ø–∫—É –≤ —Ç–µ–∫—É—â–∏–π —Ä—è–¥
    row.push({ text: card.phrase, callback_data: `view_card_${card.id}` });

    // –ï—Å–ª–∏ –≤ —Ä—è–¥—É —É–∂–µ 2 –∫–Ω–æ–ø–∫–∏ –∏–ª–∏ —ç—Ç–æ –ø–æ—Å–ª–µ–¥–Ω—è—è –∫–∞—Ä—Ç–æ—á–∫–∞, –¥–æ–±–∞–≤–ª—è–µ–º —Ä—è–¥ –≤ –∫–ª–∞–≤–∏–∞—Ç—É—Ä—É
    if (row.length === 2 || i === module.cards.length - 1) {
      keyboard.push([...row]); // –°–æ–∑–¥–∞–µ–º –∫–æ–ø–∏—é –º–∞—Å—Å–∏–≤–∞
      row = []; // –û—á–∏—â–∞–µ–º —Ä—è–¥ –¥–ª—è —Å–ª–µ–¥—É—é—â–∏—Ö –∫–Ω–æ–ø–æ–∫
    }
  }

  keyboard.push([{ text: '‚óÄÔ∏è –ù–∞–∑–∞–¥ –∫ –º–æ–¥—É–ª—é', callback_data: `view_module_${moduleId}` }]);

  await ctx.reply(message, {
    parse_mode: 'MarkdownV2',
    reply_markup: {
      inline_keyboard: keyboard,
    },
  });
}

// –§—É–Ω–∫—Ü–∏—è –¥–ª—è –ø—Ä–æ—Å–º–æ—Ç—Ä–∞ –æ—Ç–¥–µ–ª—å–Ω–æ–π –∫–∞—Ä—Ç–æ—á–∫–∏ —Å –≤–æ–∑–º–æ–∂–Ω–æ—Å—Ç—å—é —Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏—è –∏ —É–¥–∞–ª–µ–Ω–∏—è
export async function viewCard(ctx: BotContext, cardId: number): Promise<void> {
  const card = await prisma.card.findUnique({
    where: { id: cardId },
    include: {
      customValues: {
        include: {
          customField: true,
        },
      },
      module: true,
    },
  });

  if (!card) {
    await ctx.reply('–ö–∞—Ä—Ç–æ—á–∫–∞ –Ω–µ –Ω–∞–π–¥–µ–Ω–∞');
    return;
  }

  // –≠–∫—Ä–∞–Ω–∏—Ä–æ–≤–∞–Ω–∏–µ —Å–ø–µ—Ü–∏–∞–ª—å–Ω—ã—Ö —Å–∏–º–≤–æ–ª–æ–≤ Markdown
  const escapedPhrase = card.phrase.replace(/([_*[\]()~`>#+\-=|{}.!])/g, '\\$1');
  const escapedDefinition = card.definition.replace(/([_*[\]()~`>#+\-=|{}.!])/g, '\\$1');

  let message = `üîç *–ö–∞—Ä—Ç–æ—á–∫–∞ "${escapedPhrase}"*\n\n`;
  message += `*–§—Ä–∞–∑–∞:* ${escapedPhrase}\n`;
  message += `*–û–ø—Ä–µ–¥–µ–ª–µ–Ω–∏–µ:* ${escapedDefinition}\n`;

  const escapedHint = card.hint?.replace(/([_*[\]()~`>#+\-=|{}.!])/g, '\\$1');
  message += `*–ü–æ–¥—Å–∫–∞–∑–∫–∞:* ${escapedHint ?? '‚Äì'}\n`;

  if (card.customValues.length > 0) {
    message += '\n*–î–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω—ã–µ –ø–æ–ª—è:*\n';
    for (const cv of card.customValues) {
      const escapedFieldName = cv.customField.name.replace(/([_*[\]()~`>#+\-=|{}.!])/g, '\\$1');
      const escapedValue = cv.value.replace(/([_*[\]()~`>#+\-=|{}.!])/g, '\\$1');
      message += `_${escapedFieldName}: ${escapedValue || '‚Äì'}_\n`;
    }
  }

  await ctx.reply(message, {
    parse_mode: 'MarkdownV2',
    reply_markup: {
      inline_keyboard: [
        [
          { text: '‚úèÔ∏è –†–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞—Ç—å', callback_data: `edit_card_${card.id}` },
          { text: 'üóëÔ∏è –£–¥–∞–ª–∏—Ç—å', callback_data: `delete_card_${card.id}` },
        ],
        [{ text: '‚óÄÔ∏è –ù–∞–∑–∞–¥ –∫ —Å–ø–∏—Å–∫—É –∫–∞—Ä—Ç–æ—á–µ–∫', callback_data: `manage_cards_${card.module.id}` }],
      ],
    },
  });
}

export async function deleteCard(ctx: BotContext, cardId: number): Promise<void> {
  await ctx.reply('–í—ã —É–≤–µ—Ä–µ–Ω—ã, —á—Ç–æ —Ö–æ—Ç–∏—Ç–µ —É–¥–∞–ª–∏—Ç—å —ç—Ç—É –∫–∞—Ä—Ç–æ—á–∫—É?', {
    reply_markup: {
      inline_keyboard: [
        [
          { text: '‚úÖ –î–∞, —É–¥–∞–ª–∏—Ç—å', callback_data: `confirm_card_delete_${cardId}` },
          { text: '‚ùå –ù–µ—Ç, –æ—Ç–º–µ–Ω–∞', callback_data: `view_card_${cardId}` },
        ],
      ],
    },
  });
}
