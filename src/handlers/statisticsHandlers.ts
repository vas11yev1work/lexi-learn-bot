import type { BotContext } from '../types/index.js';
import { prisma, getOrCreateUser } from '../db/index.js';

// –§—É–Ω–∫—Ü–∏—è –¥–ª—è –æ—Ç–æ–±—Ä–∞–∂–µ–Ω–∏—è —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏ –æ–±—É—á–µ–Ω–∏—è
export async function showStatistics(ctx: BotContext): Promise<void> {
  if (!ctx.from) {
    await ctx.reply('–ù–µ —É–¥–∞–ª–æ—Å—å –æ–ø—Ä–µ–¥–µ–ª–∏—Ç—å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –Ω–∞—á–Ω–∏—Ç–µ –∑–∞–Ω–æ–≤–æ.');
    return;
  }

  const user = await getOrCreateUser(BigInt(ctx.from.id), {
    name: ctx.from.first_name,
    lastname: ctx.from.last_name,
    username: ctx.from.username,
  });

  // –ü–æ–ª—É—á–∞–µ–º –æ–±—â—É—é —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É –ø–æ –≤—Å–µ–º –º–æ–¥—É–ª—è–º
  const totalCards = await prisma.card.count({
    where: {
      module: {
        userId: user.id,
      },
    },
  });

  const learningProgress = await prisma.progress.findMany({
    where: {
      userId: user.id,
    },
    select: {
      interval: true,
      repetitions: true,
      card: {
        select: {
          module: {
            select: {
              id: true,
              name: true,
            },
          },
        },
      },
    },
  });

  const completedSessions = await prisma.session.count({
    where: {
      userId: user.id,
      completed: true,
    },
  });

  // –ù–∞—Ö–æ–¥–∏–º –∫–∞—Ä—Ç–æ—á–∫–∏, –∫–æ—Ç–æ—Ä—ã–µ –Ω—É–∂–Ω–æ –ø–æ–≤—Ç–æ—Ä–∏—Ç—å —Å–µ–≥–æ–¥–Ω—è
  const today = new Date();
  const dueTodayCount = await prisma.progress.count({
    where: {
      userId: user.id,
      nextReview: { lte: today },
    },
  });

  // –ì—Ä—É–ø–ø–∏—Ä—É–µ–º –∫–∞—Ä—Ç–æ—á–∫–∏ –ø–æ –º–æ–¥—É–ª—è–º
  const moduleStats: Record<string, { totalCards: number; learned: number; name: string }> = {};

  for (const progress of learningProgress) {
    const moduleId = progress.card.module.id.toString();

    if (!moduleStats[moduleId]) {
      moduleStats[moduleId] = {
        name: progress.card.module.name,
        totalCards: 0,
        learned: 0, // –ö–∞—Ä—Ç–æ—á–∫–∏ —Å –∏–Ω—Ç–µ—Ä–≤–∞–ª–æ–º >= 30 –¥–Ω–µ–π —Å—á–∏—Ç–∞–µ–º –≤—ã—É—á–µ–Ω–Ω—ã–º–∏
      };
    }

    moduleStats[moduleId].totalCards++;

    if (progress.interval >= 30) {
      moduleStats[moduleId].learned++;
    }
  }

  // –§–æ—Ä–º–∏—Ä—É–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ —Å–æ —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–æ–π
  let message = 'üìä *–í–∞—à–∞ —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –æ–±—É—á–µ–Ω–∏—è:*\n\n';
  message += `–í—Å–µ–≥–æ –∫–∞—Ä—Ç–æ—á–µ–∫: ${totalCards}\n`;
  message += `–ü—Ä–æ–π–¥–µ–Ω–æ –∑–∞–Ω—è—Ç–∏–π: ${completedSessions}\n`;
  message += `–ù—É–∂–Ω–æ –ø–æ–≤—Ç–æ—Ä–∏—Ç—å —Å–µ–≥–æ–¥–Ω—è: ${dueTodayCount}\n\n`;

  if (Object.keys(moduleStats).length > 0) {
    message += '*–ü—Ä–æ–≥—Ä–µ—Å—Å –ø–æ –º–æ–¥—É–ª—è–º:*\n';

    for (const [_module, stats] of Object.entries(moduleStats)) {
      const percent =
        stats.totalCards > 0 ? Math.round((stats.learned / stats.totalCards) * 100) : 0;
      message += `${stats.name}: ${percent}% (${stats.learned}/${stats.totalCards})\n`;
    }
  }

  await ctx.reply(message, {
    parse_mode: 'Markdown',
  });
}
